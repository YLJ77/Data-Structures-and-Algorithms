function factorial(n) {
    if (n === 0) {  // 1
        return 1
    } else {
        return n * factorial(n - 1);
        //       1             1
    }
}

/*
 * 时间复杂度
 T(n) = T(n - 1) + 3 if n > 0
 T(0) = 1

 T(n) = T(n - 1) + 3
      = T(n - 2) + 6
      = T(n - 3) + 9
      = T(n - k) + 3k

n - k = 0 => k = n
          => T(n) = T(0) + 3n
          => 3n + 1


空间复杂度
  递归树: max-depth = 5
  Space:　O(n)
  → F(5)   L0
     ↓
    F(4)   L1
     ↓
    F(3)   L2
     ↓
    F(2)   L3
     ↓
    F(1)   L4
     ↓
    F(0)   L5


内存
|-------------|
|             |
|-------------|
|             |
|-------------|
|             |
|-------------|
|             |
|-------------|
|             |
|-------------|
|             |
|-------------|
|    F(1)     |
|-------------|
|    F(2)     |
|-------------|   隐式堆栈
|    F(3)     |
|-------------|
|    F(4)     |
|-------------|
|    F(5)     |
 */
